<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Exception\NotFound;
use App\Domain\Model\DocumentSigner;
use App\Domain\Repository\DocumentSignerRepository;
use App\Infrastructure\Dao\Generated\AbstractDocumentSignerDao;
use TheCodingMachine\TDBM\ResultIterator;

/**
 * The DocumentSignerDao class will maintain the persistence of DocumentSigner class into the documents_signers table.
 */
class DocumentSignerDao extends AbstractDocumentSignerDao implements DocumentSignerRepository
{
    public function mustFindOneById(string $id): DocumentSigner
    {
        $documentSigner = $this->findOne(['id' => $id]);
        if ($documentSigner === null) {
            throw new NotFound(DocumentSigner::class, ['id' => $id]);
        }

        return $documentSigner;
    }

    public function mustFindOneByDocumentMember(string $documentId, string $memberId): DocumentSigner
    {
        $documentSigner = $this->findOne(['document_id' => $documentId, 'member_id' => $memberId]);
        if ($documentSigner === null) {
            throw new NotFound(DocumentSigner::class, ['document_id' => $documentId, 'member_id' => $memberId]);
        }

        return $documentSigner;
    }

    /**
     * @return ResultIterator|DocumentSigner[]
     */
    public function findByDocumentId(string $documentId): ResultIterator
    {
        return $this->find(['document_id' => $documentId]);
    }

    public function findByDocumentUser(string $documentId, string $userId): DocumentSigner
    {
        $documentSigner = $this->findOne(['document_id' => $documentId, 'member_id' => $userId]);
        if ($documentSigner === null) {
            throw new NotFound(DocumentSigner::class, ['document_id' => $documentId, 'member_id' => $userId]);
        }

        return $documentSigner;
    }
}
