<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Enum\UserTypeEnum;
use App\Domain\Exception\NotFound;
use App\Domain\Model\Program;
use App\Domain\Model\Question;
use App\Domain\Repository\QuestionRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractQuestionDao;
use App\Infrastructure\Logging\ModelLogger;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;
use function array_map;

/**
 * The QuestionDao class will maintain the persistence of Question class into the questions table.
 */
class QuestionDao extends AbstractQuestionDao implements QuestionRepository
{
    use ModelLogger;

    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public const SORT_COLUMNS = [
        'question' => 'question.question',
        'response' => 'question.response',
    ];

    public function save(Question $question): void
    {
        $this->log($question);
        parent::save($question);
    }

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }

    public function mustFindOneById(string $id): Question
    {
        $question = $this->findOne(['id' => $id]);
        if ($question === null) {
            throw new NotFound(Question::class, ['id' => $id]);
        }

        return $question;
    }

    public function findByFilters(?string $search, ?string $theme, ?string $sortColumn = null, ?string $sortDirection = 'asc'): ResultIterator
    {
        $filters = ['deleted = 0'];
        $parameters = [];
        if (! empty($search)) {
            $filters[] = 'question LIKE :search OR response LIKE :search';
            $parameters['search'] = '%' . $search . '%';
        }

        if (! empty($theme)) {
            $filters[] = 'theme LIKE :theme';
            $parameters['theme'] = '%' . $theme . '%';
        }

        $orderBy = 'question ASC';
        if (! empty($sortColumn) && isset(self::SORT_COLUMNS[$sortColumn])) {
            $orderBy = self::SORT_COLUMNS[$sortColumn] . ' ' . ($sortDirection === 'asc' ? 'ASC' : 'DESC');
        }

        $loggedUser = $this->userRepository->getLoggedUser();
        if ($loggedUser->getType()->getId() === UserTypeEnum::CANDIDATE) {
            $programs = $loggedUser->getProgramsByProgramsUsers();
            if (! empty($programs)) {
                $filters[] = 'program_id IN (:programs)';
                $parameters['programs'] = array_map(static fn(Program $program) => $program->getId(), $programs);
            } else {
                // This is just to prevent the user from getting questions if they have no programs
                $filters[] = 'program_id IS NULL';
            }
        }

        return $this->find($filters, $parameters, $orderBy);
    }
}
