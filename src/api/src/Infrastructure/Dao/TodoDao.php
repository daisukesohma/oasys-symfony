<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Exception\NotFound;
use App\Domain\Model\Program;
use App\Domain\Model\Todo;
use App\Domain\Model\User;
use App\Domain\Repository\TodoRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractTodoDao;
use App\Infrastructure\Logging\ModelLogger;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The TodoDao class will maintain the persistence of Todo class into the todos table.
 */
class TodoDao extends AbstractTodoDao implements TodoRepository
{
    use ModelLogger;

    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    public function save(Todo $todo): void
    {
        $this->log($todo);
        parent::save($todo);
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }

    public function mustFindOneById(string $id): Todo
    {
        $todo = $this->findOne(['id' => $id]);
        if ($todo === null) {
            throw new NotFound(Todo::class, ['id' => $id]);
        }

        return $todo;
    }

    /**
     * @return Todo[]
     */
    public function findByProgram(Program $program, ?User $user): array
    {
        /** @var Todo[] $result */
        $result = $this->find('program_id = :program' . ($user !== null ? ' AND user_id = :user' : ''), [
            'program' => $program->getId(),
            'user' => $user !== null ? $user->getId() : '',
        ])->toArray();

        return $result;
    }
}
