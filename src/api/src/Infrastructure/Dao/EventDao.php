<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Enum\EventStatusEnum;
use App\Domain\Enum\UserTypeEnum;
use App\Domain\Exception\NotFound;
use App\Domain\Model\Event;
use App\Domain\Model\User;
use App\Domain\Repository\EventRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractEventDao;
use App\Infrastructure\Logging\ModelLogger;
use Safe\DateTime;
use Safe\DateTimeImmutable;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The EventDao class will maintain the persistence of Event class into the events table.
 */
class EventDao extends AbstractEventDao implements EventRepository
{
    use ModelLogger;

    public const SORT_COLUMNS = [
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'dateEvent' => 'date_event',
        'updatedAt' => 'updated_at',
        'status' => 'status',
    ];
    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    public function save(Event $event): void
    {
        $this->log($event);
        parent::save($event);
    }

    public function saveNoLog(Event $event): void
    {
        parent::save($event);
    }

    /**
     * @throws NotFound
     */
    public function mustFindOneById(string $id): Event
    {
        $event = $this->findOne(['id' => $id]);
        if ($event === null) {
            throw new NotFound(Event::class, ['id' => $id]);
        }

        return $event;
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }

    /**
     * @return ResultIterator|Event[]
     */
    public function findByFilters(?string $search, ?string $status, ?string $organizer = null, ?string $user = null, ?string $startDate = null, ?string $endDate = null, ?string $sortColumn = 'createdAt', ?string $sortDirection = 'desc', ?string $type = null): ResultIterator
    {
        $filters = [];
        $parameters = [];

        if (! empty($search)) {
            $filters[] = 'name LIKE :search OR description LIKE :search OR type LIKE :search';
            $parameters['search'] = '%' . $search . '%';
        }

        if (! empty($status)) {
            $filters[] = 'status = :status';
            $parameters['status'] = $status;
        }

        if (! empty($organizer)) {
            $filters[] = 'organizer = :organizer';
            $parameters['organizer'] = $organizer;
        }

        if ($this->_getUser()->getType()->getId() !== UserTypeEnum::ADMINISTRATOR && $this->_getUser()->getType()->getId() !== UserTypeEnum::SUPPORT) {
            $filters[] = 'events.organizer = :userId';
            $parameters['userId'] = $this->_getUser()->getId();
        }

        if (! empty($user)) {
            $filters[] = 'events_users.user_id = :candidate';
            $parameters['candidate'] = $user;
        }

        if ($type !== null) {
            $filters[] = 'type = :type';
            $parameters['type'] = $type;
        }

        if ($startDate !== null) {
            $filters[] = 'date_event >= :startDate';
            $parameters['startDate'] = $startDate . ' 00:00:00';
        }

        if ($endDate !== null) {
            $filters[] = 'date_event <= :endDate';
            $parameters['endDate'] = $endDate . ' 23:59:59';
        }

        $orderBy = '';
        if (isset(self::SORT_COLUMNS[$sortColumn])) {
            $orderBy = self::SORT_COLUMNS[$sortColumn] . ' ' . ($sortDirection === 'desc' ? 'DESC' : 'ASC');
        }

        return $this->find($filters, $parameters, $orderBy);
    }

    /**
     * @return ResultIterator|Event[]
     */
    public function getEventsWithoutProgramForUser(User $user): ResultIterator
    {
        return $this->find('events_users.id = :user AND events.program_id IS NULL', ['user' => $user->getId()], 'events.date_event ASC');
    }

    /**
     * @return Event[]
     */
    public function getEventsToFinish(): array
    {
        /** @var Event[] $result */
        $result = $this->find('date_event < :now AND status != :archived AND status != :finished', [
            'now' => (new DateTime())->format('Y-m-d H:i:s'),
            'archived' => EventStatusEnum::ARCHIVED,
            'finished' => EventStatusEnum::FINISHED,
        ])->toArray();

        return $result;
    }

    /**
     * @return Event[]
     */
    public function getEventsToQueue(): array
    {
        /** @var Event[] $result */
        $result = $this->find('(date_event >= :now OR created_at >= :dateForCreatedAt) AND (status = :upcoming OR status = :ongoing OR status = :finished)', [
            'date' => (new DateTime())->format('Y-m-d H:i:s'),
            'dateForCreatedAt' => (new DateTime())->modify('-2 years')->format('Y-m-d H:i:s'),
            'upcoming' => EventStatusEnum::UPCOMING,
            'ongoing' => EventStatusEnum::ONGOING,
            'finished' => EventStatusEnum::FINISHED,
        ])->toArray();

        return $result;
    }

    /**
     * @return Event[]
     */
    public function getEventsToArchive(): array
    {
        /** @var Event[] $result */
        $result = $this->find('created_at <= :date AND status != :archived', [
            'date' => (new DateTime())->modify('-2 years')->format('Y-m-d H:i:s'),
            'archived' => EventStatusEnum::ARCHIVED,
            'finished' => EventStatusEnum::FINISHED,
        ])->toArray();

        return $result;
    }

    public function getEventBetween(DateTimeImmutable $startTime, DateTimeImmutable $endTime, User $user): ?Event
    {
        return $this->find([
            '
                :startTime < date_event AND date_event < :endTime
                OR date_event < :startTime AND :startTime < date_event_end
                OR date_event = :startTime
            ',
            'organizer = :user',
        ], [
            'startTime' => $startTime->format('Y-m-d H:i:s'),
            'endTime' => $endTime->format('Y-m-d H:i:s'),
            'user' => $user->getId(),
        ])->first();
    }

    /**
     * @return ResultIterator|Event[]
     */
    public function findByType(string $type): ResultIterator
    {
        return $this->find('type = :type', ['type' => $type]);
    }
}
