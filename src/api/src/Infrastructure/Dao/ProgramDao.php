<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Infrastructure\Dao;

use App\Domain\Enum\UserTypeEnum;
use App\Domain\Exception\NotFound;
use App\Domain\Model\Program;
use App\Domain\Repository\ProgramRepository;
use App\Domain\Repository\UserRepository;
use App\Infrastructure\Dao\Generated\AbstractProgramDao;
use App\Infrastructure\Logging\ModelLogger;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMService;
use function explode;
use function implode;

/**
 * The ProgramDao class will maintain the persistence of Program class into the programs table.
 */
class ProgramDao extends AbstractProgramDao implements ProgramRepository
{
    use ModelLogger;

    public const SORT_COLUMNS = [
        'name' => 'name',
        'createdAt' => 'created_at',
        'status' => 'status',
    ];

    private TokenStorageInterface $tokenStorage;
    private UserRepository $userRepository;

    public function __construct(TDBMService $tdbmService, TokenStorageInterface $tokenStorage, UserRepository $userRepository)
    {
        $this->tokenStorage = $tokenStorage;
        $this->userRepository = $userRepository;
        parent::__construct($tdbmService);
    }

    public function save(Program $program): void
    {
        $this->log($program);
        parent::save($program);
    }

    public function saveNoLog(Program $program): void
    {
        parent::save($program);
    }

    /**
     * @throws NotFound
     */
    public function mustFindOneById(string $id): Program
    {
        $program = $this->findOne(['id' => $id]);
        if ($program === null) {
            throw new NotFound(Program::class, ['id' => $id]);
        }

        return $program;
    }

    protected function getTokenStorage(): TokenStorageInterface
    {
        return $this->tokenStorage;
    }

    protected function getUserRepository(): UserRepository
    {
        return $this->userRepository;
    }

    public function findByFilters(?string $search, ?string $status, string $sortColumn = 'createdAt', string $sortDirection = 'desc', ?string $candidateId = null): ResultIterator
    {
        $filters = ['deleted = 0'];
        $parameters = [];

        if (! empty($search)) {
            foreach (explode(' ', $search) as $k => $word) {
                $filters[] = 'name LIKE :search_' . $k . ' OR description LIKE :search_' . $k;
                $parameters['search_' . $k] = '%' . $word . '%';
            }
        }

        if (! empty($status)) {
            $filters[] = 'status = :status';
            $parameters['status'] = $status;
        }

        if (! empty($candidateId)) {
            $filters[] = 'programs_users.user_id = :userId';
            $parameters['userId'] = $candidateId;
        }

        if ($this->_getUser()->getType()->getId() !== UserTypeEnum::ADMINISTRATOR && $this->_getUser()->getType()->getId() !== UserTypeEnum::SUPPORT) {
            $filters[] = 'programs_coaches.coach_id = :loggedUserId';
            $parameters['loggedUserId'] = $this->_getUser()->getId();
        }

        $orderBy = '';
        if (isset(self::SORT_COLUMNS[$sortColumn])) {
            $orderBy = self::SORT_COLUMNS[$sortColumn] . ' ' . ($sortDirection === 'desc' ? 'DESC' : 'ASC');
        }

        return $this->find($filters, $parameters, $orderBy);
    }

    public function getProgramsForAutocomplete(?string $search): ResultIterator
    {
        $filters = ['deleted = 0'];
        $parameters = [];

        if ($this->_getUser()->getType()->getId() !== UserTypeEnum::ADMINISTRATOR) {
            $filters[] = 'programs_coaches.coach_id = :coach';
            $parameters['coach'] = $this->_getUser()->getId();
        }

        if (! empty($search)) {
            //$filters[] = 'description LIKE :search';
            $parameters['search'] = '%' . $search . '%';

            $searchFilter = [];
            foreach (explode(' ', $search) as $k => $word) {
                $searchFilter[] = 'name LIKE :search_' . $k;
                $parameters['search_' . $k] = '%' . $word . '%';
            }

            $searchFilter[] = 'id = :id';

            $filters[] = implode(' OR ', $searchFilter);
            $parameters['id'] = $search;
        }

        return $this->find($filters, $parameters, 'name ASC');
    }
}
