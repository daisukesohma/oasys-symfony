<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Exception\InvalidDateValue;
use App\Domain\Exception\InvalidStringValue;
use App\Domain\Logging\LoggableModel;
use App\Domain\Model\Generated\AbstractEvent;
use App\Domain\Repository\UserRepository;
use DateTimeImmutable as UnsafeDateTimeImmutable;
use Safe\DateTimeImmutable;
use TheCodingMachine\GraphQLite\Annotations\Autowire;
use TheCodingMachine\GraphQLite\Annotations\Field;
use TheCodingMachine\GraphQLite\Annotations\Security;
use TheCodingMachine\GraphQLite\Annotations\Type;
use TheCodingMachine\TDBM\AlterableResultIterator;
use function array_filter;
use function array_map;
use function array_sum;
use function count;
use function in_array;
use function round;

/**
 * The Event class maps the 'events' table in database.
 *
 * @Type
 */
class Event extends AbstractEvent implements LoggableModel
{
    private ?bool $isAttending = null;

    /**
     * @throws InvalidStringValue
     */
    public function setName(string $name): void
    {
        $property = 'name';
        InvalidStringValue::notBlank($name, $property);
        InvalidStringValue::length($name, 1, 255, $property);
        parent::setName($name);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setDescription(string $description): void
    {
        $property = 'description';
        InvalidStringValue::notBlank($description, $property);
        parent::setDescription($description);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setType(string $type): void
    {
        $property = 'type';
        InvalidStringValue::notBlank($type, $property);
        InvalidStringValue::eventType($type, $property);
        parent::setType($type);
    }

    /**
     * @throws InvalidDateValue
     */
    public function setDateEvent(?UnsafeDateTimeImmutable $dateEvent, bool $allowPastEvents = false): void
    {
        if ($dateEvent && ! $allowPastEvents) {
            $property = 'dateEvent';
            InvalidDateValue::isDateSuperior($dateEvent, new DateTimeImmutable(), $property);
        }
        parent::setDateEvent($dateEvent);
    }

    /**
     * @throws InvalidDateValue
     */
    public function setDateEventEnd(?UnsafeDateTimeImmutable $dateEventEnd, bool $allowPastEvents = false): void
    {
        if ($dateEventEnd && ! $allowPastEvents) {
            $property = 'dateEventEnd';
            InvalidDateValue::isDateSuperior($dateEventEnd, $this->getDateEvent(), $property);
        }
        parent::setDateEventEnd($dateEventEnd);
    }

    /**
     * @Field
     */
    public function getIsFull(): bool
    {
        return count($this->getUsers()) >= $this->getNumberMaxInvites();
    }

    public function setIsAttending(bool $isAttending): void
    {
        $this->isAttending = $isAttending;
    }

    /**
     * @Field
     * @Autowire(for="$userRepository")
     */
    public function getIsAttending(UserRepository $userRepository): bool
    {
        return $this->isAttending ?? in_array(
            $userRepository->getLoggedUser()->getId(),
            array_map(static fn(User $user) => $user->getId(), $this->getUsers())
        );
    }

    /**
     * @Field
     * @Autowire(for="$userRepository")
     */
    public function getIsRated(UserRepository $userRepository): bool
    {
        return in_array(
            $userRepository->getLoggedUser()->getId(),
            array_map(static fn(EventRate $eventRate) => $eventRate->getUser()->getId(), $this->getEventsRates()->toArray())
        );
    }

    /**
     * @Field
     * @Autowire(for="$userRepository")
     */
    public function getUserRating(UserRepository $userRepository): ?EventRate
    {
        foreach ($this->getEventsRates() as $eventRate) {
            if ($eventRate->getUser()->getId() === $userRepository->getLoggedUser()->getId()) {
                return $eventRate;
            }
        }

        return null;
    }

    /**
     * @Field
     * @Security("is_granted('ROLE_CREATE_EVENT')", failWith=null)
     */
    public function getRating(): ?int
    {
        if ($this->getEventsRates()->count() === 0) {
            return null;
        }

        $ratings = array_map(static fn (EventRate $eventRate) => $eventRate->getStarsNumber(), $this->getEventsRates()->toArray());

        return (int) round(array_sum($ratings) / count($ratings));
    }

    /**
     * @return User[]
     *
     * @Field
     * @Security("is_granted('ROLE_CREATE_EVENT')", failWith=null)
     */
    public function getUsers(): array
    {
        return array_filter(parent::getUsers(), static fn (User $user) => ! $user->getDeleted());
    }

    /**
     * @return EventRate[]|AlterableResultIterator
     *
     * @Field
     * @Security("is_granted('ROLE_CREATE_EVENT')", failWith=null)
     */
    public function getEventsRates(): AlterableResultIterator
    {
        return parent::getEventsRates();
    }
}
