<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Enum\UserTypeEnum;
use App\Domain\Model\Generated\AbstractDocumentCategory;
use App\Domain\Repository\DocumentRepository;
use App\Domain\Repository\UserRepository;
use TheCodingMachine\GraphQLite\Annotations\Autowire;
use TheCodingMachine\GraphQLite\Annotations\Field;
use TheCodingMachine\GraphQLite\Annotations\Type;
use TheCodingMachine\TDBM\AlterableResultIterator;

/**
 * The DocumentCategory class maps the 'documents_categories' table in database.
 *
 * @Type
 */
class DocumentCategory extends AbstractDocumentCategory
{
    /**
     * @return Document[]|AlterableResultIterator
     *
     * @Field
     * @Autowire(for="$documentRepository")
     * @Autowire(for="$userRepository")
     */
    public function getDocuments(
        ?DocumentRepository $documentRepository = null,
        ?UserRepository $userRepository = null,
        ?string $search = null,
        ?string $tagSearch = null,
        ?string $visibility = null,
        ?bool $signaturePending = null,
        ?bool $signedByCoach = null,
        ?bool $signedByCandidate = null,
        ?string $livrableId = null,
        ?string $programId = null,
        ?string $eventId = null,
        ?string $createdAt = null
    ): AlterableResultIterator {
        if ($documentRepository !== null && $userRepository !== null) {
            $user = $userRepository->getLoggedUser();

            if ($user->getType()->getId() === UserTypeEnum::ADMINISTRATOR || $user->getType()->getId() === UserTypeEnum::SUPPORT) {
                $result = $documentRepository->findByFiltersForAdmin(
                    $search,
                    $tagSearch,
                    $visibility,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    $this->getId(),
                    $signaturePending,
                    $signedByCoach,
                    $signedByCandidate,
                    $livrableId,
                    $programId,
                    null,
                    $eventId,
                    $createdAt
                );
            } elseif ($user->getType()->getId() === UserTypeEnum::COACH) {
                $result = $documentRepository->findByFiltersForCoach(
                    $search,
                    $tagSearch,
                    $visibility,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    $this->getId(),
                    $signaturePending,
                    $signedByCoach,
                    $signedByCandidate,
                    $livrableId,
                    $programId,
                    $eventId,
                    $createdAt
                );
            } else {
                $result = $documentRepository->findByFiltersForCandidate(
                    $search,
                    $tagSearch,
                    $this->getId(),
                    null,
                    $createdAt,
                    null,
                    null
                );
            }

            return new AlterableResultIterator($result->getIterator());
        }

        return $this->retrieveManyToOneRelationshipsStorage('documents', 'from__category_id__to__table__documents_categories__columns__id', ['documents.category_id' => $this->get('id', 'documents_categories')]);
    }
}
