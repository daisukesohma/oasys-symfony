<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the DocumentSigner class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use App\Domain\Model\Document;
use App\Domain\Model\User;
use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The AbstractDocumentSigner class maps the 'documents_signers' table in database.
 */
abstract class AbstractDocumentSigner extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{

    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     */
    public function __construct()
    {
        parent::__construct();
        $this->setId(Uuid::uuid1()->toString());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'documents_signers');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'documents_signers');
    }

    /**
     * Returns the Document object bound to this object via the document_id column.
     */
    public function getDocument() : ?\App\Domain\Model\Document
    {
        return $this->getRef('from__document_id__to__table__documents__columns__id', 'documents_signers');
    }

    /**
     * The setter for the Document object bound to this object via the document_id
     * column.
     */
    public function setDocument(?\App\Domain\Model\Document $object) : void
    {
        $this->setRef('from__document_id__to__table__documents__columns__id', $object, 'documents_signers');
    }

    /**
     * Returns the User object bound to this object via the user_id column.
     *
     * @GraphqlField
     */
    public function getUser() : ?\App\Domain\Model\User
    {
        return $this->getRef('from__user_id__to__table__users__columns__id', 'documents_signers');
    }

    /**
     * The setter for the User object bound to this object via the user_id column.
     */
    public function setUser(?\App\Domain\Model\User $object) : void
    {
        $this->setRef('from__user_id__to__table__users__columns__id', $object, 'documents_signers');
    }

    /**
     * The getter for the "member_id" column.
     *
     * @return string|null
     * @GraphqlField (outputType = "ID")
     */
    public function getMemberId() : ?string
    {
        return $this->get('member_id', 'documents_signers');
    }

    /**
     * The setter for the "member_id" column.
     *
     * @param string|null $member_id
     */
    public function setMemberId(?string $member_id) : void
    {
        $this->set('member_id', $member_id, 'documents_signers');
    }

    /**
     * The getter for the "status_signature" column.
     *
     * @return string|null
     * @GraphqlField
     */
    public function getStatusSignature() : ?string
    {
        return $this->get('status_signature', 'documents_signers');
    }

    /**
     * The setter for the "status_signature" column.
     *
     * @param string|null $status_signature
     */
    public function setStatusSignature(?string $status_signature) : void
    {
        $this->set('status_signature', $status_signature, 'documents_signers');
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'documents_signers') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([
                    'from__document_id__to__table__documents__columns__id' => [
                        'foreignTable' => 'documents',
                        'localColumns' => [
                            'document_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ],
                    'from__user_id__to__table__users__columns__id' => [
                        'foreignTable' => 'users',
                        'localColumns' => [
                            'user_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ]
                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if ($stopRecursion) {
            $array['document'] = ($object = $this->getDocument()) ? ['id' => $object->getId()] : null;
        } else {
            $array['document'] = ($object = $this->getDocument()) ? $object->jsonSerialize(true) : null;
        }
        if ($stopRecursion) {
            $array['user'] = ($object = $this->getUser()) ? ['id' => $object->getId()] : null;
        } else {
            $array['user'] = ($object = $this->getUser()) ? $object->jsonSerialize(true) : null;
        }
        $array['memberId'] = $this->getMemberId();
        $array['statusSignature'] = $this->getStatusSignature();
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'documents_signers' ];
    }

    /**
     * Method called when the bean is removed from database.
     */
    public function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('from__document_id__to__table__documents__columns__id', null, 'documents_signers');
        $this->setRef('from__user_id__to__table__users__columns__id', null, 'documents_signers');
    }

    public function __clone()
    {
        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
