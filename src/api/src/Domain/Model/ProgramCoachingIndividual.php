<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Enum\ProgramTypeEnum;
use App\Domain\Exception\InvalidStringValue;
use App\Domain\Logging\LoggableModel;
use App\Domain\Model\Generated\AbstractProgramCoachingIndividual;
use TheCodingMachine\GraphQLite\Annotations\Type;
use function in_array;
use function Safe\sprintf;

/**
 * The ProgramCoachingIndividual class maps the 'program_coaching_individuals' table in database.
 *
 * @Type
 */
class ProgramCoachingIndividual extends AbstractProgramCoachingIndividual implements LoggableModel
{
    /**
     * @throws InvalidStringValue
     */
    public function setFirstName(string $firstName): void
    {
        $property = 'firstName';
        InvalidStringValue::notBlank($firstName, $property);
        InvalidStringValue::length($firstName, 1, 255, $property);
        parent::setFirstName($firstName);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setLastName(string $lastName): void
    {
        $property = 'lastName';
        InvalidStringValue::notBlank($lastName, $property);
        InvalidStringValue::length($lastName, 1, 255, $property);
        parent::setLastName($lastName);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setEmail(string $email): void
    {
        $property = 'email';
        InvalidStringValue::notBlank($email, $property);
        InvalidStringValue::length($email, 1, 255, $property);
        InvalidStringValue::email($email, $property);
        parent::setEmail($email);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setPhone(string $phone): void
    {
        $property = 'phone';
        InvalidStringValue::notBlank($phone, $property);
        InvalidStringValue::phone($phone, $property);
        parent::setPhone($phone);
    }

    /**
     * @throws InvalidStringValue
     */
    public function setType(string $type): void
    {
        if (! in_array($type, ProgramTypeEnum::values())) {
            throw new InvalidStringValue(sprintf('The type %s is not one of the valid types', $type), 400);
        }
        parent::setType($type);
    }
}
